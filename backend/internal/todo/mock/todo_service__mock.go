// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/todo/service.go

// Package mock_todo is a generated GoMock package.
package mock_todo

import (
	context "context"
	reflect "reflect"

	dto "github.com/florentinuskev/simple-todo/internal/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockTodoService is a mock of TodoService interface.
type MockTodoService struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServiceMockRecorder
}

// MockTodoServiceMockRecorder is the mock recorder for MockTodoService.
type MockTodoServiceMockRecorder struct {
	mock *MockTodoService
}

// NewMockTodoService creates a new mock instance.
func NewMockTodoService(ctrl *gomock.Controller) *MockTodoService {
	mock := &MockTodoService{ctrl: ctrl}
	mock.recorder = &MockTodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoService) EXPECT() *MockTodoServiceMockRecorder {
	return m.recorder
}

// DeleteTodo mocks base method.
func (m *MockTodoService) DeleteTodo(c context.Context, userReq *dto.DeleteTodoReq) (*dto.DeleteTodoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", c, userReq)
	ret0, _ := ret[0].(*dto.DeleteTodoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServiceMockRecorder) DeleteTodo(c, userReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoService)(nil).DeleteTodo), c, userReq)
}

// EditTodo mocks base method.
func (m *MockTodoService) EditTodo(c context.Context, userReq *dto.EditTodoReq) (*dto.EditTodoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTodo", c, userReq)
	ret0, _ := ret[0].(*dto.EditTodoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTodo indicates an expected call of EditTodo.
func (mr *MockTodoServiceMockRecorder) EditTodo(c, userReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTodo", reflect.TypeOf((*MockTodoService)(nil).EditTodo), c, userReq)
}

// GetTodo mocks base method.
func (m *MockTodoService) GetTodo(c context.Context, userReq *dto.GetTodoReq) (*dto.GetTodoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", c, userReq)
	ret0, _ := ret[0].(*dto.GetTodoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoServiceMockRecorder) GetTodo(c, userReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoService)(nil).GetTodo), c, userReq)
}

// GetTodos mocks base method.
func (m *MockTodoService) GetTodos(c context.Context, userReq *dto.GetTodosReq) (*dto.GetTodosRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", c, userReq)
	ret0, _ := ret[0].(*dto.GetTodosRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockTodoServiceMockRecorder) GetTodos(c, userReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockTodoService)(nil).GetTodos), c, userReq)
}

// NewTodo mocks base method.
func (m *MockTodoService) NewTodo(c context.Context, userReq *dto.NewTodoReq) (*dto.NewTodoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTodo", c, userReq)
	ret0, _ := ret[0].(*dto.NewTodoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTodo indicates an expected call of NewTodo.
func (mr *MockTodoServiceMockRecorder) NewTodo(c, userReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTodo", reflect.TypeOf((*MockTodoService)(nil).NewTodo), c, userReq)
}
