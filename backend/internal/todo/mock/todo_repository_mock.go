// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/todo/repository.go

// Package mock_todo is a generated GoMock package.
package mock_todo

import (
	context "context"
	reflect "reflect"

	dao "github.com/florentinuskev/simple-todo/internal/dao"
	gomock "github.com/golang/mock/gomock"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// DeleteTodo mocks base method.
func (m *MockTodoRepository) DeleteTodo(c context.Context, todo *dao.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", c, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoRepositoryMockRecorder) DeleteTodo(c, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoRepository)(nil).DeleteTodo), c, todo)
}

// EditTodo mocks base method.
func (m *MockTodoRepository) EditTodo(c context.Context, todo *dao.Todo) (*dao.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTodo", c, todo)
	ret0, _ := ret[0].(*dao.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTodo indicates an expected call of EditTodo.
func (mr *MockTodoRepositoryMockRecorder) EditTodo(c, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTodo", reflect.TypeOf((*MockTodoRepository)(nil).EditTodo), c, todo)
}

// GetTodo mocks base method.
func (m *MockTodoRepository) GetTodo(c context.Context, id string) (*dao.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo", c, id)
	ret0, _ := ret[0].(*dao.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoRepositoryMockRecorder) GetTodo(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoRepository)(nil).GetTodo), c, id)
}

// GetTodos mocks base method.
func (m *MockTodoRepository) GetTodos(c context.Context, uid string) ([]*dao.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", c, uid)
	ret0, _ := ret[0].([]*dao.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockTodoRepositoryMockRecorder) GetTodos(c, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockTodoRepository)(nil).GetTodos), c, uid)
}

// NewTodo mocks base method.
func (m *MockTodoRepository) NewTodo(c context.Context, todo *dao.Todo) (*dao.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTodo", c, todo)
	ret0, _ := ret[0].(*dao.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTodo indicates an expected call of NewTodo.
func (mr *MockTodoRepositoryMockRecorder) NewTodo(c, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTodo", reflect.TypeOf((*MockTodoRepository)(nil).NewTodo), c, todo)
}
